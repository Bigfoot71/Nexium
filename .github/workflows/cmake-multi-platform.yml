# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      # 1. <Windows, Release, MSVC compiler toolchain, Visual Studio generator>
      # 2. <Windows, Release, Clang compiler toolchain, Ninja generator>
      # 3. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 4. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            build_type: Release
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Ninja"
            build_type: Release
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            generator: "Unix Makefiles"
            build_type: Release
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"
            build_type: Release

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install Clang and Ninja for Windows (Clang build only)
      if: runner.os == 'Windows' && matrix.c_compiler == 'clang'
      run: |
        choco install llvm ninja -y
        echo "C:\Program Files\LLVM\bin" >> $env:GITHUB_PATH

    - name: Install dependencies for Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt-get install -y --no-install-recommends \
          cmake pkg-config build-essential \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
          libxi-dev libxinerama-dev libxss-dev libwayland-dev \
          libwayland-egl-backend-dev \
          libasound2-dev libpulse-dev libjack-jackd2-dev \
          libegl1-mesa-dev libgles2-mesa-dev \
          libpng-dev libjpeg-dev libwebp-dev libtiff-dev \
          libudev-dev libhidapi-dev \
          libxkbcommon-dev

    - name: Setup MSVC environment
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G "${{ matrix.generator }}"
        ${{ matrix.c_compiler != 'cl' && format('-DCMAKE_CXX_COMPILER={0}', matrix.cpp_compiler) || '' }}
        ${{ matrix.c_compiler != 'cl' && format('-DCMAKE_C_COMPILER={0}', matrix.c_compiler) || '' }}
        ${{ matrix.generator != 'Visual Studio 17 2022' && format('-DCMAKE_BUILD_TYPE={0}', matrix.build_type) || '' }}
        -DNX_BUILD_TESTS=ON
        -DNX_BUILD_DOCS=OFF
        -DNX_INSTALL=OFF
        -DNX_SDL3_VENDORED=ON
        -DNX_ZLIB_VENDORED=ON
        -DNX_PHYSFS_VENDORED=ON
        -DNX_FREETYPE_VENDORED=ON
        -DNX_ASSIMP_VENDORED=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
